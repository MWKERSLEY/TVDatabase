@model TVDatabase.Models.TVTable

@{
    ViewBag.Title = "Create";
}
<div id="topper">
    <span id="browseTitle">
        Add New Show
    </span>
</div>

@using (Html.BeginForm()) 
{
    @Html.AntiForgeryToken()
    
    <div class="form-horizontal">
        <span class="col-xs-3">
            @Html.ActionLink("Back to List", "Index", null, new { @class = "btn btn-warning" })
        </span>
        <span class="col-xs-3">
            <input type="submit" value="Create" class="btn btn-success" style="float:right;" />
        </span>
        <br />
        <div class="col-xs-12">
            @Html.ValidationSummary(true, "Some required fields haven't been filled in:", new { @class = "text-primary" })
        </div>
        <hr />
        <div class="form-group col-sm-6">
            @Html.LabelFor(model => model.ShowName, htmlAttributes: new { @class = "control-label" })
            <div>
                @Html.EditorFor(model => model.ShowName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ShowName, "", new { @class = "text-primary" })
            </div>
        </div>

        <div class="form-group col-sm-6">
            @Html.LabelFor(model => model.Genre, htmlAttributes: new { @class = "control-label" })
            <div>
                @Html.EditorFor(model => model.Genre, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Genre, "", new { @class = "text-primary" })
            </div>
        </div>

        <div class="form-group col-sm-6">
            @Html.LabelFor(model => model.DateFrom, htmlAttributes: new { @class = "control-label" })
            <div>
                @Html.EditorFor(model => model.DateFrom, new { htmlAttributes = new { @class = "form-control" } })
            </div>
        </div>

        <div class="form-group col-sm-6">
            @Html.LabelFor(model => model.DateTo, htmlAttributes: new { @class = "control-label" })
            <div>
                @Html.EditorFor(model => model.DateTo, new { htmlAttributes = new { @class = "form-control" } })
            </div>
        </div>

        <div class="form-group col-sm-6">
            @Html.LabelFor(model => model.NumberOfSeasons, htmlAttributes: new { @class = "control-label" })
            <div>
                @Html.EditorFor(model => model.NumberOfSeasons, new { htmlAttributes = new { @class = "form-control" } })
            </div>
        </div>

        <div class="form-group col-sm-6">
            @Html.LabelFor(model => model.CurrentlyRunning, htmlAttributes: new { @class = "control-label" })
            <div>
                <div class="checkbox">
                    @Html.EditorFor(model => model.CurrentlyRunning, new { htmlAttributes = new { @class = "form-control" } })
                </div>
            </div>
        </div>

        <div class="form-group col-xs-12">
            @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label" })
            <div>
                @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })
            </div>
        </div>

        <div class="form-group col-sm-6">
            @Html.LabelFor(model => model.Actors, htmlAttributes: new { @class = "control-label" })
            <div>
                @Html.EditorFor(model => model.Actors, new { htmlAttributes = new { @class = "form-control" } })
            </div>
        </div>

        <div class="form-group col-sm-6">
            @Html.LabelFor(model => model.PeakViewers, htmlAttributes: new { @class = "control-label" })
            <div>
                @Html.EditorFor(model => model.PeakViewers, new { htmlAttributes = new { @class = "form-control" } })
            </div>
        </div>

        <div class="form-group col-sm-6">
            @Html.LabelFor(model => model.Network, htmlAttributes: new { @class = "control-label" })
            <div>
                @Html.EditorFor(model => model.Network, new { htmlAttributes = new { @class = "form-control" } })
            </div>
        </div>

        <div class="form-group col-sm-6">
            @Html.LabelFor(model => model.Image, htmlAttributes: new { @class = "control-label" })
            <div>
                @Html.EditorFor(model => model.Image, new { htmlAttributes = new { @class = "form-control" } })
            </div>
        </div>

        <div class="form-group col-sm-6">
            @Html.LabelFor(model => model.Rating, htmlAttributes: new { @class = "control-label" })
            <div>
                @Html.EditorFor(model => model.Rating, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Rating, "Must be a number between 0-10.", new { @class = "text-primary" })
            </div>
        </div>

        <div class="form-group col-sm-6">
            @Html.LabelFor(model => model.Country, htmlAttributes: new { @class = "control-label" })
            <div>
                @Html.EditorFor(model => model.Country, new { htmlAttributes = new { @class = "form-control" } })
            </div>
        </div>

        <div class="form-group col-sm-6">
            @Html.LabelFor(model => model.SecretPassword, htmlAttributes: new { @class = "control-label" })
            <div>
                @Html.EditorFor(model => model.SecretPassword, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.SecretPassword, "Letters and numbers only. Up to 10 characters.", new { @class = "text-primary" })
            </div>
        </div>

    </div>
}

@*@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}*@
